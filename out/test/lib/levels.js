/* ****** automatically generated by jscover - do not edit ******/
if (typeof _$jscoverage === 'undefined') { _$jscoverage = {}; }
/* ****** end - do not edit ******/
function BranchData() {
    this.position = -1;
    this.nodeLength = -1;
    this.src = null;
    this.evalFalse = 0;
    this.evalTrue = 0;

    this.init = function(position, nodeLength, src) {
        this.position = position;
        this.nodeLength = nodeLength;
        this.src = src;
        return this;
    }

    this.ranCondition = function(result) {
        if (result)
            this.evalTrue++;
        else
            this.evalFalse++;
    };

    this.pathsCovered = function() {
        var paths = 0;
        if (this.evalTrue > 0)
          paths++;
        if (this.evalFalse > 0)
          paths++;
        return paths;
    };

    this.covered = function() {
        return this.evalTrue > 0 && this.evalFalse > 0;
    };

    this.toJSON = function() {
        return '{"position":' + this.position
            + ',"nodeLength":' + this.nodeLength
            + ',"src":' + jscoverage_quote(this.src)
            + ',"evalFalse":' + this.evalFalse
            + ',"evalTrue":' + this.evalTrue + '}';
    };

    this.message = function() {
        if (this.evalTrue === 0 && this.evalFalse === 0)
            return 'Condition never evaluated         :\t' + this.src;
        else if (this.evalTrue === 0)
            return 'Condition never evaluated to true :\t' + this.src;
        else if (this.evalFalse === 0)
            return 'Condition never evaluated to false:\t' + this.src;
        else
            return 'Condition covered';
    };
}

BranchData.fromJson = function(jsonString) {
    var json = eval('(' + jsonString + ')');
    var branchData = new BranchData();
    branchData.init(json.position, json.nodeLength, json.src);
    branchData.evalFalse = json.evalFalse;
    branchData.evalTrue = json.evalTrue;
    return branchData;
};

BranchData.fromJsonObject = function(json) {
    var branchData = new BranchData();
    branchData.init(json.position, json.nodeLength, json.src);
    branchData.evalFalse = json.evalFalse;
    branchData.evalTrue = json.evalTrue;
    return branchData;
};

function buildBranchMessage(conditions) {
    var message = 'The following was not covered:';
    for (var i = 0; i < conditions.length; i++) {
        if (conditions[i] !== undefined && conditions[i] !== null && !conditions[i].covered())
          message += '\n- '+ conditions[i].message();
    }
    return message;
};

function convertBranchDataConditionArrayToJSON(branchDataConditionArray) {
    var array = [];
    var length = branchDataConditionArray.length;
    for (var condition = 0; condition < length; condition++) {
        var branchDataObject = branchDataConditionArray[condition];
        if (branchDataObject === undefined || branchDataObject === null) {
            value = 'null';
        } else {
            value = branchDataObject.toJSON();
        }
        array.push(value);
    }
    return '[' + array.join(',') + ']';
}

function convertBranchDataLinesToJSON(branchData) {
    if (branchData === undefined) {
        return '[]'
    }
    var array = [];
    var length = branchData.length;
    for (var line = 0; line < length; line++) {
        var branchDataObject = branchData[line];
        if (branchDataObject === undefined || branchDataObject === null) {
            value = 'null';
        } else {
            value = convertBranchDataConditionArrayToJSON(branchDataObject);
        }
        array.push(value);
    }
    return '[' + array.join(',') + ']';
}

function convertBranchDataLinesFromJSON(jsonObject) {
    if (jsonObject === undefined) {
        return [];
    }
    var length = jsonObject.length;
    for (var line = 0; line < length; line++) {
        var branchDataJSON = jsonObject[line];
        if (branchDataJSON !== null) {
            for (var conditionIndex = 0; conditionIndex < branchDataJSON.length; conditionIndex ++) {
                var condition = branchDataJSON[conditionIndex];
                if (condition !== null) {
                    branchDataJSON[conditionIndex] = BranchData.fromJsonObject(condition);
                }
            }
        }
    }
    return jsonObject;
}
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
      top.opener._$jscoverage.branchData = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
      top._$jscoverage.branchData = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    this._$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (! this._$jscoverage) {
  this._$jscoverage = {};
  this._$jscoverage.branchData = {};
}
if (! _$jscoverage['levels.js']) {
  _$jscoverage['levels.js'] = [];
  _$jscoverage['levels.js'][2] = 0;
  _$jscoverage['levels.js'][4] = 0;
  _$jscoverage['levels.js'][6] = 0;
  _$jscoverage['levels.js'][8] = 0;
  _$jscoverage['levels.js'][10] = 0;
  _$jscoverage['levels.js'][12] = 0;
  _$jscoverage['levels.js'][14] = 0;
  _$jscoverage['levels.js'][16] = 0;
  _$jscoverage['levels.js'][18] = 0;
  _$jscoverage['levels.js'][20] = 0;
  _$jscoverage['levels.js'][22] = 0;
  _$jscoverage['levels.js'][24] = 0;
  _$jscoverage['levels.js'][26] = 0;
  _$jscoverage['levels.js'][28] = 0;
  _$jscoverage['levels.js'][30] = 0;
  _$jscoverage['levels.js'][32] = 0;
  _$jscoverage['levels.js'][34] = 0;
  _$jscoverage['levels.js'][36] = 0;
  _$jscoverage['levels.js'][39] = 0;
}
_$jscoverage['levels.js'].source = ["// Generated by CoffeeScript 1.4.0","var color, colors, debug, error, info, text, warn;","","colors = require('./colors');","","info = 1;","","debug = 2;","","warn = 4;","","error = 8;","","text = {};","","text[info] = 'INFO ';","","text[debug] = 'DEBUG';","","text[warn] = 'WARN ';","","text[error] = 'ERROR';","","color = {};","","color[info] = colors.green;","","color[debug] = colors.cyan;","","color[warn] = colors.yellow;","","color[error] = colors.red;","","module.exports = {","  color: function(level) {","    return color[level];","  },","  text: function(level) {","    return text[level];","  },","  info: info,","  debug: debug,","  warn: warn,","  error: error,","  levels: {","    info: info,","    debug: debug,","    warn: warn,","    error: error","  }","};"];
_$jscoverage['levels.js'][2]++;
var color, colors, debug, error, info, text, warn;
_$jscoverage['levels.js'][4]++;
colors = require('./colors');
_$jscoverage['levels.js'][6]++;
info = 1;
_$jscoverage['levels.js'][8]++;
debug = 2;
_$jscoverage['levels.js'][10]++;
warn = 4;
_$jscoverage['levels.js'][12]++;
error = 8;
_$jscoverage['levels.js'][14]++;
text = {};
_$jscoverage['levels.js'][16]++;
text[info] = 'INFO ';
_$jscoverage['levels.js'][18]++;
text[debug] = 'DEBUG';
_$jscoverage['levels.js'][20]++;
text[warn] = 'WARN ';
_$jscoverage['levels.js'][22]++;
text[error] = 'ERROR';
_$jscoverage['levels.js'][24]++;
color = {};
_$jscoverage['levels.js'][26]++;
color[info] = colors.green;
_$jscoverage['levels.js'][28]++;
color[debug] = colors.cyan;
_$jscoverage['levels.js'][30]++;
color[warn] = colors.yellow;
_$jscoverage['levels.js'][32]++;
color[error] = colors.red;
_$jscoverage['levels.js'][34]++;
module.exports = {
  color: function(level) {
  _$jscoverage['levels.js'][36]++;
  return color[level];
}, 
  text: function(level) {
  _$jscoverage['levels.js'][39]++;
  return text[level];
}, 
  info: info, 
  debug: debug, 
  warn: warn, 
  error: error, 
  levels: {
  info: info, 
  debug: debug, 
  warn: warn, 
  error: error}};
