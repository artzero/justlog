/* ****** automatically generated by jscover - do not edit ******/
if (typeof _$jscoverage === 'undefined') { _$jscoverage = {}; }
/* ****** end - do not edit ******/
function BranchData() {
    this.position = -1;
    this.nodeLength = -1;
    this.src = null;
    this.evalFalse = 0;
    this.evalTrue = 0;

    this.init = function(position, nodeLength, src) {
        this.position = position;
        this.nodeLength = nodeLength;
        this.src = src;
        return this;
    }

    this.ranCondition = function(result) {
        if (result)
            this.evalTrue++;
        else
            this.evalFalse++;
    };

    this.pathsCovered = function() {
        var paths = 0;
        if (this.evalTrue > 0)
          paths++;
        if (this.evalFalse > 0)
          paths++;
        return paths;
    };

    this.covered = function() {
        return this.evalTrue > 0 && this.evalFalse > 0;
    };

    this.toJSON = function() {
        return '{"position":' + this.position
            + ',"nodeLength":' + this.nodeLength
            + ',"src":' + jscoverage_quote(this.src)
            + ',"evalFalse":' + this.evalFalse
            + ',"evalTrue":' + this.evalTrue + '}';
    };

    this.message = function() {
        if (this.evalTrue === 0 && this.evalFalse === 0)
            return 'Condition never evaluated         :\t' + this.src;
        else if (this.evalTrue === 0)
            return 'Condition never evaluated to true :\t' + this.src;
        else if (this.evalFalse === 0)
            return 'Condition never evaluated to false:\t' + this.src;
        else
            return 'Condition covered';
    };
}

BranchData.fromJson = function(jsonString) {
    var json = eval('(' + jsonString + ')');
    var branchData = new BranchData();
    branchData.init(json.position, json.nodeLength, json.src);
    branchData.evalFalse = json.evalFalse;
    branchData.evalTrue = json.evalTrue;
    return branchData;
};

BranchData.fromJsonObject = function(json) {
    var branchData = new BranchData();
    branchData.init(json.position, json.nodeLength, json.src);
    branchData.evalFalse = json.evalFalse;
    branchData.evalTrue = json.evalTrue;
    return branchData;
};

function buildBranchMessage(conditions) {
    var message = 'The following was not covered:';
    for (var i = 0; i < conditions.length; i++) {
        if (conditions[i] !== undefined && conditions[i] !== null && !conditions[i].covered())
          message += '\n- '+ conditions[i].message();
    }
    return message;
};

function convertBranchDataConditionArrayToJSON(branchDataConditionArray) {
    var array = [];
    var length = branchDataConditionArray.length;
    for (var condition = 0; condition < length; condition++) {
        var branchDataObject = branchDataConditionArray[condition];
        if (branchDataObject === undefined || branchDataObject === null) {
            value = 'null';
        } else {
            value = branchDataObject.toJSON();
        }
        array.push(value);
    }
    return '[' + array.join(',') + ']';
}

function convertBranchDataLinesToJSON(branchData) {
    if (branchData === undefined) {
        return '[]'
    }
    var array = [];
    var length = branchData.length;
    for (var line = 0; line < length; line++) {
        var branchDataObject = branchData[line];
        if (branchDataObject === undefined || branchDataObject === null) {
            value = 'null';
        } else {
            value = convertBranchDataConditionArrayToJSON(branchDataObject);
        }
        array.push(value);
    }
    return '[' + array.join(',') + ']';
}

function convertBranchDataLinesFromJSON(jsonObject) {
    if (jsonObject === undefined) {
        return [];
    }
    var length = jsonObject.length;
    for (var line = 0; line < length; line++) {
        var branchDataJSON = jsonObject[line];
        if (branchDataJSON !== null) {
            for (var conditionIndex = 0; conditionIndex < branchDataJSON.length; conditionIndex ++) {
                var condition = branchDataJSON[conditionIndex];
                if (condition !== null) {
                    branchDataJSON[conditionIndex] = BranchData.fromJsonObject(condition);
                }
            }
        }
    }
    return jsonObject;
}
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
      top.opener._$jscoverage.branchData = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
      top._$jscoverage.branchData = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    this._$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (! this._$jscoverage) {
  this._$jscoverage = {};
  this._$jscoverage.branchData = {};
}
if (! _$jscoverage['timeout.js']) {
  _$jscoverage['timeout.js'] = [];
  _$jscoverage['timeout.js'][2] = 0;
  _$jscoverage['timeout.js'][4] = 0;
  _$jscoverage['timeout.js'][6] = 0;
  _$jscoverage['timeout.js'][15] = 0;
  _$jscoverage['timeout.js'][16] = 0;
  _$jscoverage['timeout.js'][17] = 0;
  _$jscoverage['timeout.js'][18] = 0;
  _$jscoverage['timeout.js'][19] = 0;
  _$jscoverage['timeout.js'][20] = 0;
  _$jscoverage['timeout.js'][21] = 0;
  _$jscoverage['timeout.js'][22] = 0;
  _$jscoverage['timeout.js'][25] = 0;
  _$jscoverage['timeout.js'][26] = 0;
  _$jscoverage['timeout.js'][28] = 0;
  _$jscoverage['timeout.js'][29] = 0;
  _$jscoverage['timeout.js'][31] = 0;
  _$jscoverage['timeout.js'][32] = 0;
  _$jscoverage['timeout.js'][34] = 0;
  _$jscoverage['timeout.js'][35] = 0;
  _$jscoverage['timeout.js'][37] = 0;
  _$jscoverage['timeout.js'][38] = 0;
  _$jscoverage['timeout.js'][40] = 0;
  _$jscoverage['timeout.js'][41] = 0;
  _$jscoverage['timeout.js'][43] = 0;
  _$jscoverage['timeout.js'][44] = 0;
  _$jscoverage['timeout.js'][46] = 0;
  _$jscoverage['timeout.js'][48] = 0;
}
_$jscoverage['timeout.js'].source = ["// Generated by CoffeeScript 1.4.0","var reg, rules;","","reg = /\\[.*?\\]/g;","","rules = {","  second: /s{1,2}/,","  minute: /m{1,2}/,","  hour: /(h{1,2}|a)/i,","  day: /d{1,4}/i,","  month: /M{1,4}/,","  year: /(YY|YYYY)/","};","","module.exports = function(pattern) {","  var clean, ms, n, name, rule, type;","  clean = pattern.replace(reg, '');","  for (name in rules) {","    rule = rules[name];","    if (rule.test(clean)) {","      type = name;","      break;","    }","  }","  n = new Date;","  switch (type) {","    case 'second':","      ms = new Date(n.getFullYear(), n.getMonth(), n.getDate(), n.getHours(), n.getMinutes(), n.getSeconds() + 1) - n;","      break;","    case 'minute':","      ms = new Date(n.getFullYear(), n.getMonth(), n.getDate(), n.getHours(), n.getMinutes() + 1) - n;","      break;","    case 'hour':","      ms = new Date(n.getFullYear(), n.getMonth(), n.getDate(), n.getHours() + 1) - n;","      break;","    case 'day':","      ms = new Date(n.getFullYear(), n.getMonth(), n.getDate() + 1) - n;","      break;","    case 'month':","      ms = new Date(n.getFullYear(), n.getMonth() + 1, 1) - n;","      break;","    case 'year':","      ms = new Date(n.getFullYear() + 1, 0, 1) - n;","      break;","    default:","      ms = null;","  }","  return [ms, type];","};"];
_$jscoverage['timeout.js'][2]++;
var reg, rules;
_$jscoverage['timeout.js'][4]++;
reg = /\[.*?\]/g;
_$jscoverage['timeout.js'][6]++;
rules = {
  second: /s{1,2}/, 
  minute: /m{1,2}/, 
  hour: /(h{1,2}|a)/i, 
  day: /d{1,4}/i, 
  month: /M{1,4}/, 
  year: /(YY|YYYY)/};
_$jscoverage['timeout.js'][15]++;
module.exports = function(pattern) {
  _$jscoverage['timeout.js'][16]++;
  var clean, ms, n, name, rule, type;
  _$jscoverage['timeout.js'][17]++;
  clean = pattern.replace(reg, '');
  _$jscoverage['timeout.js'][18]++;
  for (name in rules) {
    _$jscoverage['timeout.js'][19]++;
    rule = rules[name];
    _$jscoverage['timeout.js'][20]++;
    if (rule.test(clean)) {
      _$jscoverage['timeout.js'][21]++;
      type = name;
      _$jscoverage['timeout.js'][22]++;
      break;
    }
  }
  _$jscoverage['timeout.js'][25]++;
  n = new Date();
  _$jscoverage['timeout.js'][26]++;
  switch (type) {
    case 'second':
      _$jscoverage['timeout.js'][28]++;
      ms = new Date(n.getFullYear(), n.getMonth(), n.getDate(), n.getHours(), n.getMinutes(), n.getSeconds() + 1) - n;
      _$jscoverage['timeout.js'][29]++;
      break;
    case 'minute':
      _$jscoverage['timeout.js'][31]++;
      ms = new Date(n.getFullYear(), n.getMonth(), n.getDate(), n.getHours(), n.getMinutes() + 1) - n;
      _$jscoverage['timeout.js'][32]++;
      break;
    case 'hour':
      _$jscoverage['timeout.js'][34]++;
      ms = new Date(n.getFullYear(), n.getMonth(), n.getDate(), n.getHours() + 1) - n;
      _$jscoverage['timeout.js'][35]++;
      break;
    case 'day':
      _$jscoverage['timeout.js'][37]++;
      ms = new Date(n.getFullYear(), n.getMonth(), n.getDate() + 1) - n;
      _$jscoverage['timeout.js'][38]++;
      break;
    case 'month':
      _$jscoverage['timeout.js'][40]++;
      ms = new Date(n.getFullYear(), n.getMonth() + 1, 1) - n;
      _$jscoverage['timeout.js'][41]++;
      break;
    case 'year':
      _$jscoverage['timeout.js'][43]++;
      ms = new Date(n.getFullYear() + 1, 0, 1) - n;
      _$jscoverage['timeout.js'][44]++;
      break;
    default:
      _$jscoverage['timeout.js'][46]++;
      ms = null;
  }
  _$jscoverage['timeout.js'][48]++;
  return [ms, type];
};
