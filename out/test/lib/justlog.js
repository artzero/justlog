/* ****** automatically generated by jscover - do not edit ******/
if (typeof _$jscoverage === 'undefined') { _$jscoverage = {}; }
/* ****** end - do not edit ******/
function BranchData() {
    this.position = -1;
    this.nodeLength = -1;
    this.src = null;
    this.evalFalse = 0;
    this.evalTrue = 0;

    this.init = function(position, nodeLength, src) {
        this.position = position;
        this.nodeLength = nodeLength;
        this.src = src;
        return this;
    }

    this.ranCondition = function(result) {
        if (result)
            this.evalTrue++;
        else
            this.evalFalse++;
    };

    this.pathsCovered = function() {
        var paths = 0;
        if (this.evalTrue > 0)
          paths++;
        if (this.evalFalse > 0)
          paths++;
        return paths;
    };

    this.covered = function() {
        return this.evalTrue > 0 && this.evalFalse > 0;
    };

    this.toJSON = function() {
        return '{"position":' + this.position
            + ',"nodeLength":' + this.nodeLength
            + ',"src":' + jscoverage_quote(this.src)
            + ',"evalFalse":' + this.evalFalse
            + ',"evalTrue":' + this.evalTrue + '}';
    };

    this.message = function() {
        if (this.evalTrue === 0 && this.evalFalse === 0)
            return 'Condition never evaluated         :\t' + this.src;
        else if (this.evalTrue === 0)
            return 'Condition never evaluated to true :\t' + this.src;
        else if (this.evalFalse === 0)
            return 'Condition never evaluated to false:\t' + this.src;
        else
            return 'Condition covered';
    };
}

BranchData.fromJson = function(jsonString) {
    var json = eval('(' + jsonString + ')');
    var branchData = new BranchData();
    branchData.init(json.position, json.nodeLength, json.src);
    branchData.evalFalse = json.evalFalse;
    branchData.evalTrue = json.evalTrue;
    return branchData;
};

BranchData.fromJsonObject = function(json) {
    var branchData = new BranchData();
    branchData.init(json.position, json.nodeLength, json.src);
    branchData.evalFalse = json.evalFalse;
    branchData.evalTrue = json.evalTrue;
    return branchData;
};

function buildBranchMessage(conditions) {
    var message = 'The following was not covered:';
    for (var i = 0; i < conditions.length; i++) {
        if (conditions[i] !== undefined && conditions[i] !== null && !conditions[i].covered())
          message += '\n- '+ conditions[i].message();
    }
    return message;
};

function convertBranchDataConditionArrayToJSON(branchDataConditionArray) {
    var array = [];
    var length = branchDataConditionArray.length;
    for (var condition = 0; condition < length; condition++) {
        var branchDataObject = branchDataConditionArray[condition];
        if (branchDataObject === undefined || branchDataObject === null) {
            value = 'null';
        } else {
            value = branchDataObject.toJSON();
        }
        array.push(value);
    }
    return '[' + array.join(',') + ']';
}

function convertBranchDataLinesToJSON(branchData) {
    if (branchData === undefined) {
        return '[]'
    }
    var array = [];
    var length = branchData.length;
    for (var line = 0; line < length; line++) {
        var branchDataObject = branchData[line];
        if (branchDataObject === undefined || branchDataObject === null) {
            value = 'null';
        } else {
            value = convertBranchDataConditionArrayToJSON(branchDataObject);
        }
        array.push(value);
    }
    return '[' + array.join(',') + ']';
}

function convertBranchDataLinesFromJSON(jsonObject) {
    if (jsonObject === undefined) {
        return [];
    }
    var length = jsonObject.length;
    for (var line = 0; line < length; line++) {
        var branchDataJSON = jsonObject[line];
        if (branchDataJSON !== null) {
            for (var conditionIndex = 0; conditionIndex < branchDataJSON.length; conditionIndex ++) {
                var condition = branchDataJSON[conditionIndex];
                if (condition !== null) {
                    branchDataJSON[conditionIndex] = BranchData.fromJsonObject(condition);
                }
            }
        }
    }
    return jsonObject;
}
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
      top.opener._$jscoverage.branchData = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
      top._$jscoverage.branchData = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    this._$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (! this._$jscoverage) {
  this._$jscoverage = {};
  this._$jscoverage.branchData = {};
}
if (! _$jscoverage['justlog.js']) {
  _$jscoverage['justlog.js'] = [];
  _$jscoverage['justlog.js'][2] = 0;
  _$jscoverage['justlog.js'][4] = 0;
  _$jscoverage['justlog.js'][7] = 0;
  _$jscoverage['justlog.js'][9] = 0;
  _$jscoverage['justlog.js'][11] = 0;
  _$jscoverage['justlog.js'][13] = 0;
  _$jscoverage['justlog.js'][15] = 0;
  _$jscoverage['justlog.js'][17] = 0;
  _$jscoverage['justlog.js'][19] = 0;
  _$jscoverage['justlog.js'][21] = 0;
  _$jscoverage['justlog.js'][23] = 0;
  _$jscoverage['justlog.js'][25] = 0;
  _$jscoverage['justlog.js'][27] = 0;
  _$jscoverage['justlog.js'][29] = 0;
  _$jscoverage['justlog.js'][31] = 0;
  _$jscoverage['justlog.js'][33] = 0;
  _$jscoverage['justlog.js'][35] = 0;
  _$jscoverage['justlog.js'][37] = 0;
  _$jscoverage['justlog.js'][39] = 0;
  _$jscoverage['justlog.js'][40] = 0;
  _$jscoverage['justlog.js'][57] = 0;
  _$jscoverage['justlog.js'][58] = 0;
  _$jscoverage['justlog.js'][60] = 0;
  _$jscoverage['justlog.js'][61] = 0;
  _$jscoverage['justlog.js'][63] = 0;
  _$jscoverage['justlog.js'][71] = 0;
  _$jscoverage['justlog.js'][72] = 0;
  _$jscoverage['justlog.js'][73] = 0;
  _$jscoverage['justlog.js'][74] = 0;
  _$jscoverage['justlog.js'][75] = 0;
  _$jscoverage['justlog.js'][77] = 0;
  _$jscoverage['justlog.js'][78] = 0;
  _$jscoverage['justlog.js'][79] = 0;
  _$jscoverage['justlog.js'][83] = 0;
  _$jscoverage['justlog.js'][84] = 0;
  _$jscoverage['justlog.js'][85] = 0;
  _$jscoverage['justlog.js'][86] = 0;
  _$jscoverage['justlog.js'][87] = 0;
  _$jscoverage['justlog.js'][90] = 0;
  _$jscoverage['justlog.js'][91] = 0;
  _$jscoverage['justlog.js'][92] = 0;
  _$jscoverage['justlog.js'][93] = 0;
  _$jscoverage['justlog.js'][95] = 0;
  _$jscoverage['justlog.js'][96] = 0;
  _$jscoverage['justlog.js'][97] = 0;
  _$jscoverage['justlog.js'][98] = 0;
  _$jscoverage['justlog.js'][99] = 0;
  _$jscoverage['justlog.js'][101] = 0;
  _$jscoverage['justlog.js'][103] = 0;
  _$jscoverage['justlog.js'][105] = 0;
  _$jscoverage['justlog.js'][106] = 0;
  _$jscoverage['justlog.js'][107] = 0;
  _$jscoverage['justlog.js'][108] = 0;
  _$jscoverage['justlog.js'][110] = 0;
  _$jscoverage['justlog.js'][115] = 0;
  _$jscoverage['justlog.js'][116] = 0;
  _$jscoverage['justlog.js'][117] = 0;
  _$jscoverage['justlog.js'][118] = 0;
  _$jscoverage['justlog.js'][119] = 0;
  _$jscoverage['justlog.js'][121] = 0;
  _$jscoverage['justlog.js'][122] = 0;
  _$jscoverage['justlog.js'][124] = 0;
  _$jscoverage['justlog.js'][125] = 0;
  _$jscoverage['justlog.js'][129] = 0;
  _$jscoverage['justlog.js'][130] = 0;
  _$jscoverage['justlog.js'][131] = 0;
  _$jscoverage['justlog.js'][132] = 0;
  _$jscoverage['justlog.js'][133] = 0;
  _$jscoverage['justlog.js'][135] = 0;
  _$jscoverage['justlog.js'][138] = 0;
  _$jscoverage['justlog.js'][139] = 0;
  _$jscoverage['justlog.js'][141] = 0;
  _$jscoverage['justlog.js'][142] = 0;
  _$jscoverage['justlog.js'][143] = 0;
  _$jscoverage['justlog.js'][145] = 0;
  _$jscoverage['justlog.js'][147] = 0;
  _$jscoverage['justlog.js'][148] = 0;
  _$jscoverage['justlog.js'][152] = 0;
  _$jscoverage['justlog.js'][153] = 0;
  _$jscoverage['justlog.js'][154] = 0;
  _$jscoverage['justlog.js'][156] = 0;
  _$jscoverage['justlog.js'][159] = 0;
  _$jscoverage['justlog.js'][160] = 0;
  _$jscoverage['justlog.js'][161] = 0;
  _$jscoverage['justlog.js'][163] = 0;
  _$jscoverage['justlog.js'][164] = 0;
  _$jscoverage['justlog.js'][165] = 0;
  _$jscoverage['justlog.js'][168] = 0;
  _$jscoverage['justlog.js'][169] = 0;
  _$jscoverage['justlog.js'][170] = 0;
  _$jscoverage['justlog.js'][172] = 0;
  _$jscoverage['justlog.js'][173] = 0;
  _$jscoverage['justlog.js'][174] = 0;
  _$jscoverage['justlog.js'][177] = 0;
  _$jscoverage['justlog.js'][178] = 0;
  _$jscoverage['justlog.js'][179] = 0;
  _$jscoverage['justlog.js'][180] = 0;
  _$jscoverage['justlog.js'][181] = 0;
  _$jscoverage['justlog.js'][183] = 0;
  _$jscoverage['justlog.js'][184] = 0;
  _$jscoverage['justlog.js'][186] = 0;
  _$jscoverage['justlog.js'][187] = 0;
  _$jscoverage['justlog.js'][188] = 0;
  _$jscoverage['justlog.js'][190] = 0;
  _$jscoverage['justlog.js'][191] = 0;
  _$jscoverage['justlog.js'][192] = 0;
  _$jscoverage['justlog.js'][193] = 0;
  _$jscoverage['justlog.js'][194] = 0;
  _$jscoverage['justlog.js'][195] = 0;
  _$jscoverage['justlog.js'][196] = 0;
  _$jscoverage['justlog.js'][200] = 0;
  _$jscoverage['justlog.js'][201] = 0;
  _$jscoverage['justlog.js'][202] = 0;
  _$jscoverage['justlog.js'][203] = 0;
  _$jscoverage['justlog.js'][206] = 0;
  _$jscoverage['justlog.js'][207] = 0;
  _$jscoverage['justlog.js'][208] = 0;
  _$jscoverage['justlog.js'][209] = 0;
  _$jscoverage['justlog.js'][212] = 0;
  _$jscoverage['justlog.js'][213] = 0;
  _$jscoverage['justlog.js'][214] = 0;
  _$jscoverage['justlog.js'][215] = 0;
  _$jscoverage['justlog.js'][217] = 0;
  _$jscoverage['justlog.js'][218] = 0;
  _$jscoverage['justlog.js'][220] = 0;
  _$jscoverage['justlog.js'][223] = 0;
  _$jscoverage['justlog.js'][224] = 0;
  _$jscoverage['justlog.js'][225] = 0;
  _$jscoverage['justlog.js'][226] = 0;
  _$jscoverage['justlog.js'][229] = 0;
  _$jscoverage['justlog.js'][230] = 0;
  _$jscoverage['justlog.js'][231] = 0;
  _$jscoverage['justlog.js'][232] = 0;
  _$jscoverage['justlog.js'][235] = 0;
  _$jscoverage['justlog.js'][236] = 0;
  _$jscoverage['justlog.js'][237] = 0;
  _$jscoverage['justlog.js'][238] = 0;
  _$jscoverage['justlog.js'][241] = 0;
  _$jscoverage['justlog.js'][242] = 0;
  _$jscoverage['justlog.js'][243] = 0;
  _$jscoverage['justlog.js'][244] = 0;
  _$jscoverage['justlog.js'][247] = 0;
  _$jscoverage['justlog.js'][248] = 0;
  _$jscoverage['justlog.js'][249] = 0;
  _$jscoverage['justlog.js'][250] = 0;
  _$jscoverage['justlog.js'][252] = 0;
  _$jscoverage['justlog.js'][254] = 0;
  _$jscoverage['justlog.js'][255] = 0;
  _$jscoverage['justlog.js'][256] = 0;
  _$jscoverage['justlog.js'][258] = 0;
  _$jscoverage['justlog.js'][259] = 0;
  _$jscoverage['justlog.js'][260] = 0;
  _$jscoverage['justlog.js'][261] = 0;
  _$jscoverage['justlog.js'][263] = 0;
  _$jscoverage['justlog.js'][264] = 0;
  _$jscoverage['justlog.js'][265] = 0;
  _$jscoverage['justlog.js'][269] = 0;
  _$jscoverage['justlog.js'][273] = 0;
  _$jscoverage['justlog.js'][274] = 0;
  _$jscoverage['justlog.js'][277] = 0;
  _$jscoverage['justlog.js'][279] = 0;
  _$jscoverage['justlog.js'][281] = 0;
  _$jscoverage['justlog.js'][283] = 0;
  _$jscoverage['justlog.js'][285] = 0;
  _$jscoverage['justlog.js'][286] = 0;
  _$jscoverage['justlog.js'][287] = 0;
  _$jscoverage['justlog.js'][288] = 0;
  _$jscoverage['justlog.js'][291] = 0;
  _$jscoverage['justlog.js'][292] = 0;
  _$jscoverage['justlog.js'][293] = 0;
  _$jscoverage['justlog.js'][294] = 0;
  _$jscoverage['justlog.js'][297] = 0;
  _$jscoverage['justlog.js'][299] = 0;
  _$jscoverage['justlog.js'][301] = 0;
}
_$jscoverage['justlog.js'].source = ["// Generated by CoffeeScript 1.4.0","var JustLog, MIN_ROTATE_TIMEOUT, create, cwd, debug, defaultLogFile, error, events, fs, info, k, levels, mkdirp, moment, os, path, pattern, timeout, util, v, warn, _ref, _ref1,","  __hasProp = {}.hasOwnProperty,","  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },","  __slice = [].slice;","","moment = require('moment');","","fs = require('fs');","","path = require('path');","","events = require('events');","","mkdirp = require('mkdirp');","","os = require('options-stream');","","util = require('util');","","levels = require('./levels');","","timeout = require('./timeout');","","pattern = require('./pattern');","","info = levels.info, debug = levels.debug, warn = levels.warn, error = levels.error;","","cwd = process.cwd();","","defaultLogFile = \"[\" + cwd + \"/logs/\" + (path.basename(path.basename(process.argv[1], '.js'), '.coffee')) + \"-]YYYY-MM-DD[.log]\";","","MIN_ROTATE_TIMEOUT = 100;","","JustLog = (function(_super) {","","  __extends(JustLog, _super);","","  function JustLog(options) {","    this.options = os({","      encoding: 'utf-8',","      file: {","        level: error | warn,","        pattern: pattern.pre.FILE,","        path: defaultLogFile,","        mode: '0664',","        dir_mode: '2775',","        watcher_timeout: 1000","      },","      stdio: {","        level: error | warn | debug | info,","        pattern: pattern.pre.COLOR,","        stdout: process.stdout,","        stderr: process.stderr","      }","    }, options);","    if (this.options.file.level === 0) {","      this.options.file = false;","    }","    if (this.options.stdio.level === 0) {","      this.options.stdio = false;","    }","    this.file = {","      path: null,","      stream: null,","      timer: null,","      opening: false,","      watcher: null,","      ino: null","    };","    this.closed = false;","    if (this.options.stdio) {","      this.stdout = this.options.stdio.stdout;","      this.stderr = this.options.stdio.stderr;","      this.options.stdio.render = pattern.compile(this.options.stdio.pattern);","    }","    if (this.options.file) {","      this.options.file.render = pattern.compile(this.options.file.pattern);","      this._initFile();","    }","  }","","  JustLog.prototype.emit = function() {","    var args;","    args = 1 &lt;= arguments.length ? __slice.call(arguments, 0) : [];","    JustLog.__super__.emit.apply(this, args);","    JustLog.__super__.emit.apply(this, ['all'].concat(__slice.call(args)));","  };","","  JustLog.prototype._checkFileRenamed = function(cb) {","    var _this = this;","    if (this.options.file === false || this.file.stream === null || this.file.opening === true) {","      return;","    }","    return fs.stat(this.file.path, function(err, stat) {","      var prev;","      if (err) {","        if (err.code === 'ENOENT') {","          cb(null, true);","        } else {","          cb(err);","        }","        return;","      }","      prev = _this.file.ino;","      _this.file.ino = stat.ino;","      if (prev === null || prev === stat.ino) {","        cb(null, false);","      } else {","        cb(null, true);","      }","    });","  };","","  JustLog.prototype._checkFile = function() {","    var _this = this;","    this._checkFileRenamed(function(err, changed) {","      if (err) {","        return _this.emit(err);","      }","      if (changed === false) {","        return;","      }","      _this._closeStream();","      _this._newStream();","    });","  };","","  JustLog.prototype._setFilePath = function() {","    var filePath;","    filePath = path.normalize(moment().format(this.options.file.path));","    if (path[0] === '/') {","      filePath = path.relative(cwd, filePath);","    }","    return this.file.path = filePath;","  };","","  JustLog.prototype._newStream = function() {","    var filePath, stream,","      _this = this;","    filePath = this.file.path;","    try {","      mkdirp.sync(path.dirname(filePath), this.options.file.dir_mode);","    } catch (err) {","      this.emit('error', err);","    }","    this.file.opening = true;","    stream = fs.createWriteStream(filePath, {","      flags: 'a',","      mode: this.options.file.mode","    });","    stream.on('error', this.emit.bind(this));","    stream.on('open', function() {","      return _this.file.opening = false;","    });","    return this.file.stream = stream;","  };","","  JustLog.prototype._closeStream = function() {","    if (this.options.file === false || !this.file.stream) {","      return;","    }","    this.file.stream.end();","    this.file.stream.destroySoon();","    this.file.stream = null;","  };","","  JustLog.prototype._initFile = function() {","    if (!this.options.file) {","      return;","    }","    this._setFilePath();","    this._newStream();","    return this.file.watcher = setInterval(this._checkFile.bind(this), this.options.file.watcher_timeout);","  };","","  JustLog.prototype._rotateFile = function() {","    var ms, prev;","    ms = timeout(this.options.file.path)[0];","    if (null === ms) {","      return;","    }","    if (ms &lt;= MIN_ROTATE_TIMEOUT) {","      ms = MIN_ROTATE_TIMEOUT;","    }","    if (this.file.timer !== null) {","      clearTimeout(this.timer);","      this.timer = null;","    }","    this.file.timer = setTimeout(this._rotateFile.bind(this), ms);","    this.emit('timer-start', ms);","    prev = this.file.path;","    this._setFilePath();","    if (prev !== this.file.path) {","      this._closeStream();","      this._newStream();","    }","  };","","  JustLog.prototype._fileLog = function(msg, level) {","    var line;","    line = pattern.format(this.options.file.render, msg, level);","    return this.file.stream.write(line, this.options.encoding);","  };","","  JustLog.prototype._stdioLog = function(msg, level) {","    var line;","    line = pattern.format(this.options.stdio.render, msg, level);","    return (level &amp; (error | warn) ? this.stderr : this.stdout).write(line, this.options.encoding);","  };","","  JustLog.prototype._log = function(msg, level) {","    msg = util.format.apply(util, msg);","    if (this.options.file &amp;&amp; (this.options.file.level &amp; level)) {","      this._fileLog(msg, level);","    }","    if (this.options.stdio &amp;&amp; (this.options.stdio.level &amp; level)) {","      this._stdioLog(msg, level);","    }","    return this;","  };","","  JustLog.prototype.info = function() {","    var msg;","    msg = 1 &lt;= arguments.length ? __slice.call(arguments, 0) : [];","    return this._log(msg, info);","  };","","  JustLog.prototype.debug = function() {","    var msg;","    msg = 1 &lt;= arguments.length ? __slice.call(arguments, 0) : [];","    return this._log(msg, debug);","  };","","  JustLog.prototype.warn = function() {","    var msg;","    msg = 1 &lt;= arguments.length ? __slice.call(arguments, 0) : [];","    return this._log(msg, warn);","  };","","  JustLog.prototype.error = function() {","    var msg;","    msg = 1 &lt;= arguments.length ? __slice.call(arguments, 0) : [];","    return this._log(msg, error);","  };","","  JustLog.prototype.close = function(cb) {","    if (this.options.file === false || this.closed) {","      if (cb) {","        process.nextTick(cb);","      }","      return;","    }","    this.closed = true;","    if (cb &amp;&amp; this.file.stream) {","      this.file.stream.on('close', cb);","    }","    this._closeStream();","    if (this.file.watcher) {","      clearInterval(this.file.watcher);","      this.file.watcher = null;","    }","    if (this.file.timer) {","      clearTimeout(this.file.timer);","      this.file.timer = null;","    }","  };","","  return JustLog;","","})(events.EventEmitter);","","create = function(options) {","  return new JustLog(options);","};","","create.ERROR = error;","","create.WARN = warn;","","create.DEBUG = debug;","","create.INFO = info;","","_ref = levels.levels;","for (k in _ref) {","  v = _ref[k];","  create[k.toUpperCase()] = v;","}","","_ref1 = pattern.pre;","for (k in _ref1) {","  v = _ref1[k];","  create[k] = v;","}","","create.ALL = error | warn | debug | info;","","create.EXCEPTION = error | warn;","","module.exports = create;"];
_$jscoverage['justlog.js'][2]++;
var JustLog, MIN_ROTATE_TIMEOUT, create, cwd, debug, defaultLogFile, error, events, fs, info, k, levels, mkdirp, moment, os, path, pattern, timeout, util, v, warn, _ref, _ref1, __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
  _$jscoverage['justlog.js'][4]++;
  for (var key in parent) {
    if (__hasProp.call(parent, key)) 
      child[key] = parent[key];
  }
  function ctor() {
    this.constructor = child;
  }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
  child.__super__ = parent.prototype;
  return child;
}, __slice = [].slice;
_$jscoverage['justlog.js'][7]++;
moment = require('moment');
_$jscoverage['justlog.js'][9]++;
fs = require('fs');
_$jscoverage['justlog.js'][11]++;
path = require('path');
_$jscoverage['justlog.js'][13]++;
events = require('events');
_$jscoverage['justlog.js'][15]++;
mkdirp = require('mkdirp');
_$jscoverage['justlog.js'][17]++;
os = require('options-stream');
_$jscoverage['justlog.js'][19]++;
util = require('util');
_$jscoverage['justlog.js'][21]++;
levels = require('./levels');
_$jscoverage['justlog.js'][23]++;
timeout = require('./timeout');
_$jscoverage['justlog.js'][25]++;
pattern = require('./pattern');
_$jscoverage['justlog.js'][27]++;
info = levels.info , debug = levels.debug , warn = levels.warn , error = levels.error;
_$jscoverage['justlog.js'][29]++;
cwd = process.cwd();
_$jscoverage['justlog.js'][31]++;
defaultLogFile = "[" + cwd + "/logs/" + (path.basename(path.basename(process.argv[1], '.js'), '.coffee')) + "-]YYYY-MM-DD[.log]";
_$jscoverage['justlog.js'][33]++;
MIN_ROTATE_TIMEOUT = 100;
_$jscoverage['justlog.js'][35]++;
JustLog = (function(_super) {
  _$jscoverage['justlog.js'][37]++;
  __extends(JustLog, _super);
  _$jscoverage['justlog.js'][39]++;
  function JustLog(options) {
    _$jscoverage['justlog.js'][40]++;
    this.options = os({
  encoding: 'utf-8', 
  file: {
  level: error | warn, 
  pattern: pattern.pre.FILE, 
  path: defaultLogFile, 
  mode: '0664', 
  dir_mode: '2775', 
  watcher_timeout: 1000}, 
  stdio: {
  level: error | warn | debug | info, 
  pattern: pattern.pre.COLOR, 
  stdout: process.stdout, 
  stderr: process.stderr}}, options);
    _$jscoverage['justlog.js'][57]++;
    if (this.options.file.level === 0) {
      _$jscoverage['justlog.js'][58]++;
      this.options.file = false;
    }
    _$jscoverage['justlog.js'][60]++;
    if (this.options.stdio.level === 0) {
      _$jscoverage['justlog.js'][61]++;
      this.options.stdio = false;
    }
    _$jscoverage['justlog.js'][63]++;
    this.file = {
  path: null, 
  stream: null, 
  timer: null, 
  opening: false, 
  watcher: null, 
  ino: null};
    _$jscoverage['justlog.js'][71]++;
    this.closed = false;
    _$jscoverage['justlog.js'][72]++;
    if (this.options.stdio) {
      _$jscoverage['justlog.js'][73]++;
      this.stdout = this.options.stdio.stdout;
      _$jscoverage['justlog.js'][74]++;
      this.stderr = this.options.stdio.stderr;
      _$jscoverage['justlog.js'][75]++;
      this.options.stdio.render = pattern.compile(this.options.stdio.pattern);
    }
    _$jscoverage['justlog.js'][77]++;
    if (this.options.file) {
      _$jscoverage['justlog.js'][78]++;
      this.options.file.render = pattern.compile(this.options.file.pattern);
      _$jscoverage['justlog.js'][79]++;
      this._initFile();
    }
  }
  _$jscoverage['justlog.js'][83]++;
  JustLog.prototype.emit = function() {
  _$jscoverage['justlog.js'][84]++;
  var args;
  _$jscoverage['justlog.js'][85]++;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  _$jscoverage['justlog.js'][86]++;
  JustLog.__super__.emit.apply(this, args);
  _$jscoverage['justlog.js'][87]++;
  JustLog.__super__.emit.apply(this, ['all'].concat(__slice.call(args)));
};
  _$jscoverage['justlog.js'][90]++;
  JustLog.prototype._checkFileRenamed = function(cb) {
  _$jscoverage['justlog.js'][91]++;
  var _this = this;
  _$jscoverage['justlog.js'][92]++;
  if (this.options.file === false || this.file.stream === null || this.file.opening === true) {
    _$jscoverage['justlog.js'][93]++;
    return;
  }
  _$jscoverage['justlog.js'][95]++;
  return fs.stat(this.file.path, function(err, stat) {
  _$jscoverage['justlog.js'][96]++;
  var prev;
  _$jscoverage['justlog.js'][97]++;
  if (err) {
    _$jscoverage['justlog.js'][98]++;
    if (err.code === 'ENOENT') {
      _$jscoverage['justlog.js'][99]++;
      cb(null, true);
    } else {
      _$jscoverage['justlog.js'][101]++;
      cb(err);
    }
    _$jscoverage['justlog.js'][103]++;
    return;
  }
  _$jscoverage['justlog.js'][105]++;
  prev = _this.file.ino;
  _$jscoverage['justlog.js'][106]++;
  _this.file.ino = stat.ino;
  _$jscoverage['justlog.js'][107]++;
  if (prev === null || prev === stat.ino) {
    _$jscoverage['justlog.js'][108]++;
    cb(null, false);
  } else {
    _$jscoverage['justlog.js'][110]++;
    cb(null, true);
  }
});
};
  _$jscoverage['justlog.js'][115]++;
  JustLog.prototype._checkFile = function() {
  _$jscoverage['justlog.js'][116]++;
  var _this = this;
  _$jscoverage['justlog.js'][117]++;
  this._checkFileRenamed(function(err, changed) {
  _$jscoverage['justlog.js'][118]++;
  if (err) {
    _$jscoverage['justlog.js'][119]++;
    return _this.emit(err);
  }
  _$jscoverage['justlog.js'][121]++;
  if (changed === false) {
    _$jscoverage['justlog.js'][122]++;
    return;
  }
  _$jscoverage['justlog.js'][124]++;
  _this._closeStream();
  _$jscoverage['justlog.js'][125]++;
  _this._newStream();
});
};
  _$jscoverage['justlog.js'][129]++;
  JustLog.prototype._setFilePath = function() {
  _$jscoverage['justlog.js'][130]++;
  var filePath;
  _$jscoverage['justlog.js'][131]++;
  filePath = path.normalize(moment().format(this.options.file.path));
  _$jscoverage['justlog.js'][132]++;
  if (path[0] === '/') {
    _$jscoverage['justlog.js'][133]++;
    filePath = path.relative(cwd, filePath);
  }
  _$jscoverage['justlog.js'][135]++;
  return this.file.path = filePath;
};
  _$jscoverage['justlog.js'][138]++;
  JustLog.prototype._newStream = function() {
  _$jscoverage['justlog.js'][139]++;
  var filePath, stream, _this = this;
  _$jscoverage['justlog.js'][141]++;
  filePath = this.file.path;
  _$jscoverage['justlog.js'][142]++;
  try {
    _$jscoverage['justlog.js'][143]++;
    mkdirp.sync(path.dirname(filePath), this.options.file.dir_mode);
  }  catch (err) {
  _$jscoverage['justlog.js'][145]++;
  this.emit('error', err);
}
  _$jscoverage['justlog.js'][147]++;
  this.file.opening = true;
  _$jscoverage['justlog.js'][148]++;
  stream = fs.createWriteStream(filePath, {
  flags: 'a', 
  mode: this.options.file.mode});
  _$jscoverage['justlog.js'][152]++;
  stream.on('error', this.emit.bind(this));
  _$jscoverage['justlog.js'][153]++;
  stream.on('open', function() {
  _$jscoverage['justlog.js'][154]++;
  return _this.file.opening = false;
});
  _$jscoverage['justlog.js'][156]++;
  return this.file.stream = stream;
};
  _$jscoverage['justlog.js'][159]++;
  JustLog.prototype._closeStream = function() {
  _$jscoverage['justlog.js'][160]++;
  if (this.options.file === false || !this.file.stream) {
    _$jscoverage['justlog.js'][161]++;
    return;
  }
  _$jscoverage['justlog.js'][163]++;
  this.file.stream.end();
  _$jscoverage['justlog.js'][164]++;
  this.file.stream.destroySoon();
  _$jscoverage['justlog.js'][165]++;
  this.file.stream = null;
};
  _$jscoverage['justlog.js'][168]++;
  JustLog.prototype._initFile = function() {
  _$jscoverage['justlog.js'][169]++;
  if (!this.options.file) {
    _$jscoverage['justlog.js'][170]++;
    return;
  }
  _$jscoverage['justlog.js'][172]++;
  this._setFilePath();
  _$jscoverage['justlog.js'][173]++;
  this._newStream();
  _$jscoverage['justlog.js'][174]++;
  return this.file.watcher = setInterval(this._checkFile.bind(this), this.options.file.watcher_timeout);
};
  _$jscoverage['justlog.js'][177]++;
  JustLog.prototype._rotateFile = function() {
  _$jscoverage['justlog.js'][178]++;
  var ms, prev;
  _$jscoverage['justlog.js'][179]++;
  ms = timeout(this.options.file.path)[0];
  _$jscoverage['justlog.js'][180]++;
  if (null === ms) {
    _$jscoverage['justlog.js'][181]++;
    return;
  }
  _$jscoverage['justlog.js'][183]++;
  if (ms <= MIN_ROTATE_TIMEOUT) {
    _$jscoverage['justlog.js'][184]++;
    ms = MIN_ROTATE_TIMEOUT;
  }
  _$jscoverage['justlog.js'][186]++;
  if (this.file.timer !== null) {
    _$jscoverage['justlog.js'][187]++;
    clearTimeout(this.timer);
    _$jscoverage['justlog.js'][188]++;
    this.timer = null;
  }
  _$jscoverage['justlog.js'][190]++;
  this.file.timer = setTimeout(this._rotateFile.bind(this), ms);
  _$jscoverage['justlog.js'][191]++;
  this.emit('timer-start', ms);
  _$jscoverage['justlog.js'][192]++;
  prev = this.file.path;
  _$jscoverage['justlog.js'][193]++;
  this._setFilePath();
  _$jscoverage['justlog.js'][194]++;
  if (prev !== this.file.path) {
    _$jscoverage['justlog.js'][195]++;
    this._closeStream();
    _$jscoverage['justlog.js'][196]++;
    this._newStream();
  }
};
  _$jscoverage['justlog.js'][200]++;
  JustLog.prototype._fileLog = function(msg, level) {
  _$jscoverage['justlog.js'][201]++;
  var line;
  _$jscoverage['justlog.js'][202]++;
  line = pattern.format(this.options.file.render, msg, level);
  _$jscoverage['justlog.js'][203]++;
  return this.file.stream.write(line, this.options.encoding);
};
  _$jscoverage['justlog.js'][206]++;
  JustLog.prototype._stdioLog = function(msg, level) {
  _$jscoverage['justlog.js'][207]++;
  var line;
  _$jscoverage['justlog.js'][208]++;
  line = pattern.format(this.options.stdio.render, msg, level);
  _$jscoverage['justlog.js'][209]++;
  return (level & (error | warn) ? this.stderr : this.stdout).write(line, this.options.encoding);
};
  _$jscoverage['justlog.js'][212]++;
  JustLog.prototype._log = function(msg, level) {
  _$jscoverage['justlog.js'][213]++;
  msg = util.format.apply(util, msg);
  _$jscoverage['justlog.js'][214]++;
  if (this.options.file && (this.options.file.level & level)) {
    _$jscoverage['justlog.js'][215]++;
    this._fileLog(msg, level);
  }
  _$jscoverage['justlog.js'][217]++;
  if (this.options.stdio && (this.options.stdio.level & level)) {
    _$jscoverage['justlog.js'][218]++;
    this._stdioLog(msg, level);
  }
  _$jscoverage['justlog.js'][220]++;
  return this;
};
  _$jscoverage['justlog.js'][223]++;
  JustLog.prototype.info = function() {
  _$jscoverage['justlog.js'][224]++;
  var msg;
  _$jscoverage['justlog.js'][225]++;
  msg = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  _$jscoverage['justlog.js'][226]++;
  return this._log(msg, info);
};
  _$jscoverage['justlog.js'][229]++;
  JustLog.prototype.debug = function() {
  _$jscoverage['justlog.js'][230]++;
  var msg;
  _$jscoverage['justlog.js'][231]++;
  msg = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  _$jscoverage['justlog.js'][232]++;
  return this._log(msg, debug);
};
  _$jscoverage['justlog.js'][235]++;
  JustLog.prototype.warn = function() {
  _$jscoverage['justlog.js'][236]++;
  var msg;
  _$jscoverage['justlog.js'][237]++;
  msg = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  _$jscoverage['justlog.js'][238]++;
  return this._log(msg, warn);
};
  _$jscoverage['justlog.js'][241]++;
  JustLog.prototype.error = function() {
  _$jscoverage['justlog.js'][242]++;
  var msg;
  _$jscoverage['justlog.js'][243]++;
  msg = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  _$jscoverage['justlog.js'][244]++;
  return this._log(msg, error);
};
  _$jscoverage['justlog.js'][247]++;
  JustLog.prototype.close = function(cb) {
  _$jscoverage['justlog.js'][248]++;
  if (this.options.file === false || this.closed) {
    _$jscoverage['justlog.js'][249]++;
    if (cb) {
      _$jscoverage['justlog.js'][250]++;
      process.nextTick(cb);
    }
    _$jscoverage['justlog.js'][252]++;
    return;
  }
  _$jscoverage['justlog.js'][254]++;
  this.closed = true;
  _$jscoverage['justlog.js'][255]++;
  if (cb && this.file.stream) {
    _$jscoverage['justlog.js'][256]++;
    this.file.stream.on('close', cb);
  }
  _$jscoverage['justlog.js'][258]++;
  this._closeStream();
  _$jscoverage['justlog.js'][259]++;
  if (this.file.watcher) {
    _$jscoverage['justlog.js'][260]++;
    clearInterval(this.file.watcher);
    _$jscoverage['justlog.js'][261]++;
    this.file.watcher = null;
  }
  _$jscoverage['justlog.js'][263]++;
  if (this.file.timer) {
    _$jscoverage['justlog.js'][264]++;
    clearTimeout(this.file.timer);
    _$jscoverage['justlog.js'][265]++;
    this.file.timer = null;
  }
};
  _$jscoverage['justlog.js'][269]++;
  return JustLog;
})(events.EventEmitter);
_$jscoverage['justlog.js'][273]++;
create = function(options) {
  _$jscoverage['justlog.js'][274]++;
  return new JustLog(options);
};
_$jscoverage['justlog.js'][277]++;
create.ERROR = error;
_$jscoverage['justlog.js'][279]++;
create.WARN = warn;
_$jscoverage['justlog.js'][281]++;
create.DEBUG = debug;
_$jscoverage['justlog.js'][283]++;
create.INFO = info;
_$jscoverage['justlog.js'][285]++;
_ref = levels.levels;
_$jscoverage['justlog.js'][286]++;
for (k in _ref) {
  _$jscoverage['justlog.js'][287]++;
  v = _ref[k];
  _$jscoverage['justlog.js'][288]++;
  create[k.toUpperCase()] = v;
}
_$jscoverage['justlog.js'][291]++;
_ref1 = pattern.pre;
_$jscoverage['justlog.js'][292]++;
for (k in _ref1) {
  _$jscoverage['justlog.js'][293]++;
  v = _ref1[k];
  _$jscoverage['justlog.js'][294]++;
  create[k] = v;
}
_$jscoverage['justlog.js'][297]++;
create.ALL = error | warn | debug | info;
_$jscoverage['justlog.js'][299]++;
create.EXCEPTION = error | warn;
_$jscoverage['justlog.js'][301]++;
module.exports = create;
